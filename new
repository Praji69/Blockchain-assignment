import hashlib
import json
from datetime import datetime
from typing import List, Dict, Any


class Block:
    """
    Represents a single block in the blockchain.
    Each block contains transaction data, timestamp, hash, and reference to previous block.
    """
    
    def __init__(self, block_number: int, transactions: List[Dict[str, Any]], 
                 previous_hash: str = "0"):
        """
        Initialize a new block.
        
        Args:
            block_number (int): Unique identifier for the block
            transactions (List[Dict]): List of transaction data
            previous_hash (str): Hash of the previous block in the chain
        """
        self.block_number = block_number
        self.timestamp = datetime.now().isoformat()
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.nonce = 0  # Used for proof of work (optional enhancement)
        self.hash = self.calculate_hash()
    
    def calculate_hash(self) -> str:
        """
        Calculate the cryptographic hash of the block's contents.
        
        Returns:
            str: SHA-256 hash of the block data
        """
        # Create a string representation of block data
        block_data = {
            "block_number": self.block_number,
            "timestamp": self.timestamp,
            "transactions": self.transactions,
            "previous_hash": self.previous_hash,
            "nonce": self.nonce
        }
        
        # Convert to JSON string and encode to bytes
        block_string = json.dumps(block_data, sort_keys=True)
        block_bytes = block_string.encode('utf-8')
        
        # Calculate SHA-256 hash
        return hashlib.sha256(block_bytes).hexdigest()
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert block to dictionary format for display.
        
        Returns:
            Dict: Block data as dictionary
        """
        return {
            "block_number": self.block_number,
            "timestamp": self.timestamp,
            "transactions": self.transactions,
            "previous_hash": self.previous_hash,
            "hash": self.hash,
            "nonce": self.nonce
        }


class Blockchain:
    """
    Represents the blockchain - a chain of blocks linked by cryptographic hashes.
    """
    
    def __init__(self):
        """Initialize the blockchain with a genesis block."""
        self.chain: List[Block] = []
        self.create_genesis_block()
    
    def create_genesis_block(self) -> None:
        """
        Create the first block in the blockchain (genesis block).
        """
        genesis_transactions = [{"message": "Genesis Block - Blockchain Initialized"}]
        genesis_block = Block(0, genesis_transactions, "0")
        self.chain.append(genesis_block)
        print("✓ Genesis block created successfully!")
    
    def get_latest_block(self) -> Block:
        """
        Get the most recent block in the chain.
        
        Returns:
            Block: The last block in the chain
        """
        return self.chain[-1]
    
    def add_block(self, transactions: List[Dict[str, Any]]) -> bool:
        """
        Add a new block to the blockchain.
        
        Args:
            transactions (List[Dict]): List of transactions to include in the block
            
        Returns:
            bool: True if block was added successfully, False otherwise
        """
        try:
            # Get the previous block's hash
            previous_block = self.get_latest_block()
            previous_hash = previous_block.hash
            
            # Create new block
            new_block_number = len(self.chain)
            new_block = Block(new_block_number, transactions, previous_hash)
            
            # Add to chain
            self.chain.append(new_block)
            
            print(f"✓ Block #{new_block_number} added successfully!")
            return True
            
        except Exception as e:
            print(f"✗ Error adding block: {e}")
            return False
    
    def validate_chain(self) -> bool:
        """
        Validate the entire blockchain for integrity.
        
        Returns:
            bool: True if chain is valid, False if corrupted
        """
        print("🔍 Validating blockchain integrity...")
        
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            
            # Check if current block's hash is valid
            if current_block.hash != current_block.calculate_hash():
                print(f"✗ Block #{i} has invalid hash!")
                return False
            
            # Check if current block's previous_hash matches previous block's hash
            if current_block.previous_hash != previous_block.hash:
                print(f"✗ Block #{i} is not properly linked to previous block!")
                return False
        
        print("✓ Blockchain is valid and secure!")
        return True
    
    def display_chain(self) -> None:
        """Display the entire blockchain in a readable format."""
        print("\n" + "="*60)
        print("BLOCKCHAIN DISPLAY")
        print("="*60)
        
        for i, block in enumerate(self.chain):
            print(f"\n📦 BLOCK #{block.block_number}")
            print("-" * 40)
            print(f"Timestamp: {block.timestamp}")
            print(f"Previous Hash: {block.previous_hash[:16]}...")
            print(f"Current Hash: {block.hash[:16]}...")
            print(f"Transactions:")
            
            for j, transaction in enumerate(block.transactions, 1):
                print(f"  {j}. {transaction}")
            
            if i < len(self.chain) - 1:
                print("    ↓")
        
        print("\n" + "="*60)
    
    def get_chain_stats(self) -> Dict[str, Any]:
        """
        Get statistics about the blockchain.
        
        Returns:
            Dict: Statistics about the blockchain
        """
        total_transactions = sum(len(block.transactions) for block in self.chain)
        
        return {
            "total_blocks": len(self.chain),
            "total_transactions": total_transactions,
            "genesis_block_hash": self.chain[0].hash,
            "latest_block_hash": self.get_latest_block().hash,
            "is_valid": self.validate_chain()
        }


def create_transaction() -> Dict[str, Any]:
    """
    Create a new transaction from user input.
    
    Returns:
        Dict: Transaction data
    """
    print("\n📝 Create New Transaction")
    print("-" * 30)
    
    # Get transaction details from user
    sender = input("Enter sender: ").strip()
    receiver = input("Enter receiver: ").strip()
    amount = input("Enter amount: ").strip()
    message = input("Enter message (optional): ").strip()
    
    transaction = {
        "sender": sender,
        "receiver": receiver,
        "amount": amount,
        "timestamp": datetime.now().isoformat()
    }
    
    if message:
        transaction["message"] = message
    
    return transaction


def main():
    """Main application loop with user interface."""
    print("🔗 SIMPLE BLOCKCHAIN APPLICATION")
    print("=" * 50)
    print("Welcome to the Blockchain Demo!")
    print("This application demonstrates basic blockchain concepts.")
    
    # Initialize blockchain
    blockchain = Blockchain()
    
    while True:
        print("\n📋 MENU OPTIONS")
        print("-" * 20)
        print("1. Add New Block")
        print("2. Display Blockchain")
        print("3. Validate Blockchain")
        print("4. View Chain Statistics")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == '1':
            # Add new block
            print("\n🆕 Adding New Block")
            transactions = []
            
            while True:
                transaction = create_transaction()
                transactions.append(transaction)
                
                add_more = input("\nAdd another transaction? (y/n): ").strip().lower()
                if add_more != 'y':
                    break
            
            # Add block to blockchain
            if blockchain.add_block(transactions):
                print(f"Block containing {len(transactions)} transaction(s) added to blockchain!")
        
        elif choice == '2':
            # Display blockchain
            blockchain.display_chain()
        
        elif choice == '3':
            # Validate blockchain
            is_valid = blockchain.validate_chain()
            if is_valid:
                print("✅ Blockchain validation passed!")
            else:
                print("❌ Blockchain validation failed!")
        
        elif choice == '4':
            # Display statistics
            stats = blockchain.get_chain_stats()
            print("\n📊 BLOCKCHAIN STATISTICS")
            print("-" * 30)
            print(f"Total Blocks: {stats['total_blocks']}")
            print(f"Total Transactions: {stats['total_transactions']}")
            print(f"Genesis Block Hash: {stats['genesis_block_hash'][:32]}...")
            print(f"Latest Block Hash: {stats['latest_block_hash'][:32]}...")
            print(f"Chain Valid: {'✅ Yes' if stats['is_valid'] else '❌ No'}")
        
        elif choice == '5':
            # Exit application
            print("\n👋 Thank you for using the Blockchain Application!")
            print("Remember to commit your work to GitHub!")
            break
        
        else:
            print("❌ Invalid choice. Please enter 1-5.")


if __name__ == "__main__":
    main()